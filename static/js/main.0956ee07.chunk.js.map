{"version":3,"sources":["utils/GetDashId.js","components/NewDashboard.jsx","components/AddTask.jsx","utils/Context.js","components/Task.jsx","components/TaskDetails.jsx","utils/GetTaskId.js","App.js","index.js"],"names":["dashId","GetDashId","NewDashboard","dashLimit","onCreate","disabled","className","onClick","newDash","id","dashName","tasks","AddTask","dashboard","addTask","DraggedItemContext","createContext","DraggedItemNewPositionContext","Task","task","deleteTask","changePrio","selectTask","toggleDone","updateDatabankPostDrag","useState","showText","setShowText","isDragging","setIsDragging","useContext","setDraggedTask","draggedTask","draggable","onDragStart","e","console","log","taskId","setTimeout","onDragEnd","taskTitle","stopPropagation","toggleDescription","taskDetails","taskPriority","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","TaskDetails","selectedTask","updTask","newTaskDetails","setNewTaskDetails","newTaskTitle","setNewTaskTitle","value","placeholder","onChange","target","type","GetTaskId","App","dataBank","setDataBank","newBoardCode","setNewBoardCode","useEffect","status","setDashLimit","length","tempData","push","filter","elemOfTasks","setSelectedTask","selectedTaskPrev","setSelectedTaskPrev","setShowTaskDesc","showTaskDesc","showCloseButton","setShowCloseButton","board","selectedBoard","newBoard","Provider","map","onDragEnter","handleDragEnter","name","changeDashName","onFocus","onBlur","dash","deleteDash","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0956ee07.chunk.js","sourcesContent":["let dashId = 0\r\nconst GetDashId = () => {\r\n  return dashId++\r\n}\r\n\r\nexport default (GetDashId)\r\n","import React from 'react'\r\nimport GetDashId from '../utils/GetDashId.js'\r\n\r\nfunction NewDashboard({ dashLimit, onCreate }) {\r\n\r\n  // ADD NEW DASHBOARD\r\n  const newDash = () => {\r\n    let newDash = {id: GetDashId(), dashName: \"\", tasks: []}\r\n    onCreate(newDash)\r\n  }\r\n  // END of ADD NEW DASHBOARD\r\n\r\n  return (\r\n    <>\r\n      {\r\n        dashLimit ? \r\n        <button disabled className=\"btn-disabled\">Reached maximum</button>\r\n        :\r\n        <button className=\"btn-board-create\" onClick={newDash}>+ Create board</button>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewDashboard\r\n","import React from 'react'\r\n\r\nfunction AddTask({dashboard, addTask}) {\r\n  return (\r\n    <button className=\"add-task\" onClick={() => addTask(dashboard)}>\r\n      <div className=\"add-task-sign\">+</div>\r\n      <p>Add Task</p>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default AddTask\r\n","import { createContext } from 'react'\r\n\r\nexport const DraggedItemContext = createContext()\r\nexport const DraggedItemNewPositionContext = createContext()","import { useState, useContext } from 'react'\r\nimport EditLogo from '../svg/edit-d-text'\r\nimport { DraggedItemContext } from '../utils/Context'\r\n\r\n\r\nfunction Task({dashboard, task, deleteTask, changePrio, toggleDone, selectTask, updateDatabankPostDrag}) {\r\n\r\n  const [ showText, setShowText ] = useState(false)\r\n  const [ isDragging, setIsDragging ] = useState(false)\r\n  const { draggedTask, setDraggedTask } = useContext(DraggedItemContext)\r\n\r\n  let toggleDescription = (e) => {\r\n    setShowText(!showText)\r\n    e.stopPropagation()\r\n  }\r\n\r\n  const handleDragStart = (e) => {\r\n    console.log(\"drag start:\")\r\n    console.log(dashboard.id)\r\n    console.log(task.id)\r\n    console.log(\"---------------------\")\r\n    setDraggedTask({dashId: dashboard.id, taskId: task.id})\r\n    setTimeout(() => {\r\n      setIsDragging(true)\r\n    }, 0);\r\n  }\r\n\r\n  const handleDragEnd = () => {\r\n    setIsDragging(false)\r\n    updateDatabankPostDrag()\r\n  }\r\n\r\n  return (\r\n    <div className={isDragging ? \"task-card dragging\" : \"task-card\"} key={task.id} draggable onDragStart={(e) => handleDragStart(e)} onDragEnd={(e) => handleDragEnd(e)}>\r\n      <div className=\"card-top\">\r\n        <div className=\"title-text\">{task.taskTitle}</div>\r\n        <div className=\"card-top-x\" onClick={(e) => {deleteTask(dashboard, task, e)}}>x</div>\r\n      </div>\r\n      <div className=\"card-mid\" onClick={(e) => toggleDescription(e)}>\r\n        { showText ? task.taskDetails : \"Click for details...\"}\r\n      </div>\r\n      <div className=\"card-bot\">\r\n        <div className={`task-prio prio-${task.taskPriority}`} onClick={(e) => changePrio(e, task)}>{task.taskPriority} priority</div>\r\n        <div className=\"task-edit\" onClick={() => selectTask(dashboard, task)}><svg className=\"edit-logo\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Task\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nfunction TaskDetails({selectedTask, updTask, changePrio}) {\r\n\r\n  \r\n  let dashboard = \"\"\r\n  let task = \"\"\r\n  if (selectedTask !== null) {\r\n    task = selectedTask[1]\r\n  }\r\n  \r\n  const [ newTaskDetails, setNewTaskDetails ] = useState(task.taskDetails)\r\n  const [ newTaskTitle, setNewTaskTitle ] = useState(task.taskTitle)\r\n\r\n  const changeTaskDesc = (value) => {\r\n    setNewTaskDetails(value)\r\n  }\r\n\r\n  const changeTaskTitle = (value) => {\r\n    console.log(\"change task title was kicked off\")\r\n    setNewTaskTitle(value)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"task-details\">\r\n      <div className=\"details-header details\">\r\n        <div className=\"details-task-header\">TaskID: {task.id}</div>\r\n        <textarea className=\"details-task-title\" value={newTaskTitle === \"Undefined\" ? \"\" : newTaskTitle} placeholder={newTaskTitle === \"Undefined\" || newTaskTitle === \"\" ? \"Undefined\" : \"\"} onChange={(e) => changeTaskTitle(e.target.value)}/>\r\n      </div>\r\n\r\n      <div className=\"details-top details\">\r\n        <h3>Details</h3>\r\n        <div className=\"details-task-prio\">Priority:<p className={`task-prio prio-${task.taskPriority}`} onClick={(e) => changePrio(e, task)}>{task.taskPriority} priority</p></div>\r\n        <div className=\"details-task-desc\">Description:</div>\r\n        <textarea type=\"textarea\" value={newTaskDetails} onChange={(e) => changeTaskDesc(e.target.value)}/>\r\n      </div>\r\n\r\n      <div className=\"details-mid details\">\r\n        <h3>People</h3>\r\n        <p className=\"details-task-prio\"></p>\r\n        <p className=\"details-task-prio\"></p>\r\n      </div>\r\n      \r\n      <div className=\"details-bot details\">\r\n        <h3>Dates</h3>\r\n        <div className=\"details-task-dates\"></div>\r\n      </div>\r\n\r\n      <div className=\"details-btn-box\">\r\n        <button onClick={() => updTask(newTaskTitle, newTaskDetails)}>UPDATE</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskDetails\r\n","let taskId = 0\r\nconst GetTaskId = () => {\r\n  return taskId++\r\n}\r\n\r\nexport default (GetTaskId)\r\n","// import Dashboards from './Dashboards'\nimport { useEffect, useState, useRef } from 'react'\nimport NewDashboard from './components/NewDashboard.jsx'\nimport AddTask from './components/AddTask'\nimport Task from './components/Task'\nimport TaskDetails from './components/TaskDetails.jsx'\nimport GetTaskId from './utils/GetTaskId.js'\nimport GetDashId from './utils/GetDashId.js'\n\nimport { DraggedItemContext, DraggedItemNewPositionContext } from './utils/Context'\n\n\n\nfunction App() {\n  \n  const [ dataBank, setDataBank] = useState([])\n  const [ newBoardCode, setNewBoardCode ] = useState(null)\n  const [ draggedTask, setDraggedTask ] = useState({})\n\n  useEffect(() => {\n    setDataBank([\n      {id: GetDashId(), dashName: \"ToDo\", tasks: [\n        {id: GetTaskId(), status: \"pending\", taskPriority: \"high\", taskTitle: \"Some random text\", taskDetails: \"The detailed description of the specific task max 255 chars.\"},\n        {id: GetTaskId(), status: \"progress\", taskPriority: \"low\", taskTitle: \"Do loundry\", taskDetails: \"Ever have that feeling where you're not sure if you're awake or dreaming?\"},\n        {id: GetTaskId(), status: \"pending\", taskPriority: \"med\", taskTitle: \"He who controls the Spice controls the Universe!\", taskDetails: \"Let's face it, this is not the worst thing you've caught me doing.\"},\n      ]},\n      {id: GetDashId(), dashName: \"In progress\", tasks: [\n        {id: GetTaskId(), status: \"done\", taskPriority: \"low\", taskTitle: \"Long live the emperor for two rows\", taskDetails: \"The detailed description of the specific task max 255 chars.\"},\n        {id: GetTaskId(), status: \"pending\", taskPriority: \"low\", taskTitle: \"Doctor Who?\", taskDetails: \"The universe is big. It’s vast and complicated and ridiculous. And sometimes, very rarely, impossible things just happen and we call them miracles.\"},\n        {id: GetTaskId(), status: \"pending\", taskPriority: \"med\", taskTitle: \"Hello There\", taskDetails: \"May the force be with you, young padawan.\"},\n        {id: GetTaskId(), status: \"pending\", taskPriority: \"high\", taskTitle: \"Why so serious?\", taskDetails: \"The detailed description of the specific task max 255 chars.\"},\n      ]}\n    ])\n  }, [])\n\n  console.log(dataBank)\n\n\n  // CHECK # of DASHBOARDS\n    const [ dashLimit, setDashLimit ] = useState(false)\n  \n    useEffect(() => {\n      if (dataBank.length >= 5) {\n        setDashLimit(true)\n      }\n    }, [dataBank.length]);\n  // CHECK # of DASHBOARDS\n\n\n// DASH NAME CHANGE\n  const changeDashName = (dashboard, e) => {\n    dashboard.dashName = e.target.value\n    console.log(\"changeDashName function happened\")\n    setDataBank([...dataBank])\n  }\n// END of DASH NAME CHANGE\n\n\n// CREATE DASHBOARD\n  const updDashboard = (newDash) => {\n    console.log(\"updDashboard function happened\")\n    setDataBank([...dataBank, newDash])\n  }\n// END of CREATE DASHBOARD\n\n\n// MARK TASK AS DONE\n  const toggleDone = (e, task) => {\n    let tempData = [...dataBank]\n    if (task.status === \"pending\") {\n      task.status = \"progress\"\n    } else if (task.status === \"progress\") {\n      task.status = \"done\"  \n    } else {\n      task.status = \"pending\"\n    }\n    console.log(\"toogleDone function happened\")\n    setDataBank(tempData)\n    e.stopPropagation() /// NOT WORKING YET !!!!!!!!!!!!!!!\n  }\n// END of MARK TASK AS DONE\n\n\n// ADD NEW TASK\n  const addTask = (dashboard) => {\n    let tempData = dashboard.tasks\n    tempData.push({id: GetTaskId(), status: \"pending\", taskPriority: \"low\", taskTitle: \"Undefined\", taskDetails: \" \"})\n    console.log(\"addTask function happened\")\n    setDataBank([...dataBank])\n    }\n// END of ADD NEW TASK\n\n\n// CHANGE PRIO\n  const changePrio = (e, task) => {\n    if (task.taskPriority === \"low\") {\n      task.taskPriority = \"med\"\n    } else if (task.taskPriority === \"med\") {\n      task.taskPriority = \"high\"\n    } else {\n      task.taskPriority = \"low\"\n    }\n    console.log(\"changePrio function happened\")\n    setDataBank([...dataBank])\n\n    e.stopPropagation()\n  }\n// END of CHANGE PRIO\n\n\n// DELETE TASK\n  const deleteTask = (dashboard, task, e) => {\n    dashboard.tasks = dashboard.tasks.filter(elemOfTasks => elemOfTasks !== task)\n    console.log(\"deleteTask function happened\")\n    setSelectedTask(null)\n    setDataBank([...dataBank])\n    e.stopPropagation()\n  }\n// END of DELETE TASK\n\n\n// SELECT TASK \n  const [selectedTask, setSelectedTask] = useState(null)\n  const [selectedTaskPrev, setSelectedTaskPrev] = useState(null)\n\n  const selectTask = (dashboard, task) => {\n\n    if (task.id === selectedTaskPrev) {\n      setShowTaskDesc(false)\n      setSelectedTaskPrev(null)\n    } else {\n      setShowTaskDesc(true)\n      setSelectedTask([dashboard, task])\n      setSelectedTaskPrev(task.id)\n    }\n  }\n\n  const [ showTaskDesc, setShowTaskDesc] = useState(false)\n  const [ showCloseButton, setShowCloseButton] = useState(true)\n\n\n// DELETED DASHBOARD\n  const deleteDash = (dashboard) => {\n    setDataBank(dataBank.filter(dash => dash !== dashboard))\n    setDashLimit(false)\n  }\n// END of DELETE DASHBOARD\n\n\n\n// UPDATE TASK\n  const updTask = (taskTitle, taskDetails) => {\n    selectedTask[1].taskTitle = taskTitle\n    selectedTask[1].taskDetails = taskDetails\n    setDataBank([...dataBank])\n  }\n// END of UPDATE TASK\n\n\n\n  const handleDragEnter = (e, dashboard) => {\n    setNewBoardCode(dashboard.id)\n  }\n\n  const updateDatabankPostDrag = () => {\n    console.log(\"update inisiated\")\n    const [selectedTask] = dataBank.filter(board => board.id === draggedTask.dashId)[0].tasks.filter(task => task.id === draggedTask.taskId)\n    const selectedBoard = dataBank.filter(board => board.id === draggedTask.dashId)[0]\n    const newBoard = dataBank.filter(board => board.id === newBoardCode)[0]\n    // console.log(dataBank.filter(board => board.id === draggedTask.dashId)[0].tasks.filter(task => task.id === draggedTask.taskId))\n    // console.log(selectedTask)\n    // console.log(selectedBoard)\n    // console.log(newBoard)\n\n    selectedBoard.tasks = selectedBoard.tasks.filter(elemOfTasks => elemOfTasks !== selectedTask)\n    newBoard.tasks.push(selectedTask)\n\n    setDataBank([...dataBank])\n  }\n\n\n  return (\n    <DraggedItemContext.Provider value={{ draggedTask, setDraggedTask }}>\n    <DraggedItemNewPositionContext.Provider value={{ newBoardCode, setNewBoardCode }}>\n\n      <div className=\"App\">\n        <div className=\"dashboard-container\">\n          <div className=\"todo-container\">\n            <div className=\"header-box\">\n              <h1>The Kanban UI</h1>\n              <NewDashboard dashLimit={dashLimit} onCreate={updDashboard} />\n            </div>\n            <div className=\"dashboard-box\">\n              {\n                dataBank.map(dashboard => { return (\n                  <div className=\"board\" key={dashboard.id} onDragEnter={(e) => handleDragEnter(e, dashboard)}>\n                    <div className=\"board-header\">\n                      <input type=\"text\" name=\"dashname\" id=\"dashname\" onChange={(e) => changeDashName(dashboard, e)} value={dashboard.dashName === \"\" ? \"\" : dashboard.dashName} placeholder={dashboard.dashName === \"\" ? \"Undefined\" : \"\"} onFocus={() => setShowCloseButton(false)} onBlur={() => setShowCloseButton(true)}/>\n                      {showCloseButton && <div className=\"board-delete\" onClick={() => deleteDash(dashboard)}>x</div>}\n                    </div>\n\n                    {dashboard.tasks.map(task => \n                      <Task key={task.id} dashboard={dashboard} task={task} deleteTask={deleteTask} changePrio={changePrio} toggleDone={toggleDone} selectTask={selectTask} updateDatabankPostDrag={updateDatabankPostDrag}/>\n                    )}\n                    <AddTask dashboard={dashboard} addTask={addTask} />\n                  </div>\n                )})\n              }\n            </div>\n          </div>\n          \n          { showTaskDesc && <TaskDetails selectedTask={selectedTask} updTask={updTask} changePrio={changePrio}/>}\n\n        </div>\n      </div>\n\n    </DraggedItemNewPositionContext.Provider>\n    </DraggedItemContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}